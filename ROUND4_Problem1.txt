package oops;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
public class Round3_1 {

	public static void main(String[] args)  {		
			
			
			HashMap<Character , ArrayList<Character>  > map1 = new HashMap<>();
			HashMap<Character ,  int[]  > map2 = new HashMap<>();
ArrayList<Character> y = new ArrayList<>(); y.add('Y');
map1.put('Y', y);
int y1[] = new int[26];
y1['Y' - 'A'] = 1;

ArrayList<Character> r = new ArrayList<>(); r.add('R');
map1.put('R', r);
int r1[] = new int[26];
r1['R' - 'A']  = 1 ;
map2.put('R', r1);

ArrayList<Character> b = new ArrayList<>();b.add('B');
map1.put('B', b);
int b1[] = new int[26];
b1['B' - 'A' ]  = 1;
map2.put('B', b1);


ArrayList<Character> o = new ArrayList<>();o.add('R');o.add('Y');
map1.put('O', o);

int o1[] = new int[26];
o1['R' - 'A']  = 1;
o1['Y' - 'A'] = 1;
map2.put('O', o1);
ArrayList<Character> p = new ArrayList<>();p.add('R');p.add('B');
map1.put('P', p);
int p1[] = new int[26];
p1['R' - 'A'] =1 ;
p1['B' - 'A'] =1 ;
map2.put('P', p1);
ArrayList<Character> g = new ArrayList<>();g.add('Y');g.add('B');
map1.put('G', g);
int g1[] = new int[26];
g1['Y' - 'A'] = 1;
g1['B' - 'A' ] =1 ;

map2.put('G', g1);
ArrayList<Character> a = new ArrayList<>();a.add('R');a.add('Y');a.add('B');
map1.put('A', a);

int a1[] = new int[26];
a1['R' - 'A'] =1 ;
a1['Y' - 'A']  =1;
a1['B' - 'A'] =1 ;
map2.put('A', a1);







String color = "ROAOR";
	int n = color.length();
	
	
	HashMap<Integer  , ArrayList<Character> > map = new HashMap<>();
	for( int i2 = 0 ; i2 < n; i2++)
	{
	
		ArrayList<Character> oo = new ArrayList<>(map1.get(color.charAt(i2)) ) ;
		map.put(i2 , oo );
	}
	
	
	int res = 0 , ans[] = new int[n];
	for( int i = 0 ; i < n ; i++)
	{
		ans[i] = map1.get(color.charAt(i)).size();
	}
	int i = 0 , j = 0 ;
	
	
	System.out.println();
	
	
	while( i < n )
	{
		char ch = color.charAt(i);
		ArrayList<Character> temp = new ArrayList<>(map.get(j) ) ;
		for( char cr : temp)
		{
			int q = j ;
			while( j < n )
			{
				
//				char pp = color.charAt(j);
				if( map.get(j).contains(cr))
				{
					ans[j]--;
					int ll = map.get(j).indexOf(cr);
					map.get(j).remove(ll);
				}
				else
				{
					break ;
				}
				j++;
			
			}
			j = q ;
			
			
		}
		
		
		while( i < n && ans[i] == 0 )
		{
			i++;
			
		}
		j = i ;
		res++;
//		System.out.println(ans[i] + " uuu ");

	}
	System.out.println(res);


}
	}


